{
  "_args": [
    [
      {
        "raw": "gulp-gjslint@https://nexus.hue.workslan/nexus/content/groups/hue-npm/gulp-gjslint/-/gulp-gjslint-0.1.5.tgz",
        "scope": null,
        "escapedName": "gulp-gjslint",
        "name": "gulp-gjslint",
        "rawSpec": "https://nexus.hue.workslan/nexus/content/groups/hue-npm/gulp-gjslint/-/gulp-gjslint-0.1.5.tgz",
        "spec": "https://nexus.hue.workslan/nexus/content/groups/hue-npm/gulp-gjslint/-/gulp-gjslint-0.1.5.tgz",
        "type": "remote"
      },
      "C:\\HUE\\closure-library-practice"
    ]
  ],
  "_from": "gulp-gjslint@~0.1.4",
  "_id": "gulp-gjslint@0.1.5",
  "_inCache": true,
  "_location": "/gulp-gjslint",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gulp-gjslint@https://nexus.hue.workslan/nexus/content/groups/hue-npm/gulp-gjslint/-/gulp-gjslint-0.1.5.tgz",
    "scope": null,
    "escapedName": "gulp-gjslint",
    "name": "gulp-gjslint",
    "rawSpec": "https://nexus.hue.workslan/nexus/content/groups/hue-npm/gulp-gjslint/-/gulp-gjslint-0.1.5.tgz",
    "spec": "https://nexus.hue.workslan/nexus/content/groups/hue-npm/gulp-gjslint/-/gulp-gjslint-0.1.5.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://nexus.hue.workslan/nexus/content/groups/hue-npm/gulp-gjslint/-/gulp-gjslint-0.1.5.tgz",
  "_shasum": "92c7389eadb7704507280a9db3871dce56cb755f",
  "_shrinkwrap": null,
  "_spec": "gulp-gjslint@https://nexus.hue.workslan/nexus/content/groups/hue-npm/gulp-gjslint/-/gulp-gjslint-0.1.5.tgz",
  "_where": "C:\\HUE\\closure-library-practice",
  "author": {
    "name": "Tom Seldon",
    "email": "tom@tomseldon.co.uk",
    "url": "http://www.tomseldon.co.uk"
  },
  "dependencies": {
    "chalk": "^0.5.1",
    "closure-linter-wrapper": "^1.0.1",
    "gulp-util": "^3.0.0",
    "merge": "^1.1.3",
    "through2": "^0.5.1"
  },
  "description": "Gulp task for running gjslint, the Google Closure linter.",
  "devDependencies": {
    "chai": "^1.9.1",
    "codeclimate-test-reporter": "0.0.4",
    "gulp": "^3.8.7",
    "gulp-istanbul": "^0.3.1",
    "gulp-jscs": "^1.1.2",
    "gulp-mocha": "^1.1.1",
    "istanbul": "^0.3.2",
    "jscs": "^1.5.9",
    "mocha": "^1.21.0",
    "rewire": "^2.1.0",
    "sinon": "^1.10.3",
    "sinon-chai": "^2.5.0",
    "vinyl": "^0.3.2"
  },
  "homepage": "https://www.github.com/TomSeldon/gulp-gjslint",
  "keywords": [
    "gulpplugin",
    "lint",
    "linter",
    "gjslint",
    "google",
    "closure",
    "closure-linter",
    "closure-linter-wrapper"
  ],
  "license": "BSD-2-Clause",
  "main": "index.js",
  "name": "gulp-gjslint",
  "optionalDependencies": {},
  "peerDependencies": {
    "gulp": "^3.8"
  },
  "readme": "gulp-gjslint\n==============\n[![NPM version](https://badge.fury.io/js/gulp-gjslint.svg)](http://badge.fury.io/js/gulp-gjslint)\n[![Build Status](https://travis-ci.org/TomSeldon/gulp-gjslint.svg?branch=master)](https://travis-ci.org/TomSeldon/gulp-gjslint) [![Code Climate](https://codeclimate.com/github/TomSeldon/gulp-gjslint/badges/gpa.svg)](https://codeclimate.com/github/TomSeldon/gulp-gjslint) [![Test Coverage](https://codeclimate.com/github/TomSeldon/gulp-gjslint/badges/coverage.svg)](https://codeclimate.com/github/TomSeldon/gulp-gjslint)\n\n> Lint Javascript using [Google's Javascript linter](https://developers.google.com/closure/utilities/)\n\n## Install\n\n```bash\n$ npm install --save-dev gulp-gjslint\n```\n\n## Usage\n\n```js\n// See also: Gulpfile.example.js\n\nvar gulp = require('gulp'),\n    gjslint = require('gulp-gjslint');\n\n// Lint files and output results to the console\ngulp.task('default', function() {\n    return gulp.src('some/files/**/*.js')\n        .pipe(gjslint())\n        .pipe(gjslint.reporter('console'));\n});\n\n// Lint files, output to console and exit if\n// an error is raised (useful for CI servers).\ngulp.task('default', function() {\n    return gulp.src('some/files/**/*.js')\n        .pipe(gjslint())\n        .pipe(gjslint.reporter('console'), {fail: true})\n});\n\n// Pass options to the linter\n// See https://github.com/jmendiara/node-closure-linter-wrapper\nvar lintOptions = {flags: ['--nojsdoc', '--max_line_length 120']};\ngulp.task('default', function() {\n    return gulp.src('some/files/**/*.js')\n        .pipe(gjslint(lintOptions))\n        .pipe(gjslint.reporter('console'));\n});\n```\n\n## API\n\nOptions can be passed to the `gulp-gjslint` task, which will be passed directly\nto the `gjslint` library.\n\nSee the [library documentation](https://github.com/jmendiara/node-closure-linter-wrapper)\nfor details on what can be specified.\n\n*Note: The reporter option is disabled. Use the additional reporter tasks as shown in the\nexamples above.*\n\n### gjslint(options)\n\nRun gjslint on each file.\n\nWrites `gjslint` object to each Vinyl object, e.g.\n\n```js\n{\n    success: false,\n    results: {\n        errors: [\n            {\n                line: 1,\n                code: 2\n                description: 'Missing space before \"{\"'\n            }\n        ],\n        total: 1,\n        newErrors: 1,\n        filesCount: 1,\n        filesOK: 0\n    }\n}\n```\n\n### gjslint.reporter(name, options)\n\nWrite reporter on each file that was processed by `gjslint`.\n\n#### Reporter: Console\n\nOutput results to the console.\n\n##### Example usage\n\n```js\ngulp.task('lint', function() {\n    var gjslint = require('gulp-gjslint'),\n        lintOptions = {},\n        reporterOptions = {};\n\n    return gulp.src('./**/*.js')\n        .pipe(gjslint(lintOptions))\n        .pipe(gjslint.reporter('console', reporterOptions));\n```\n\n##### Default options:\n\n```js\n{\n    fail: false // If true, emits an error on failure. Useful for CI servers.\n                // Note: This will cause the task to fail after the first\n                // linting error.\n}\n```\n\n#### Reporter: Fail\n\nEmits an error on when processing a failed file.\n\nIntended for use with a CI server in conjunction with another style of reporter.\n\n##### Example usage\n\n```js\ngulp.task('lint', function() {\n    var gjslint = require('gulp-gjslint');\n\n    return gulp.src('./**/*.js')\n        .pipe(gjslint())\n        .pipe(gjslint.reporter('console'))\n        .pipe(gjslint.reporter('fail'));\n});\n```\n\n#### Reporter: Jshint Adapter\n\nExperimental adapter for using Jshint reporters. Only tested with\n[jshint-stylish](https://github.com/sindresorhus/jshint-stylish).\n\nFormat for usage is:\n\n```js\n.pipe(gjslint.reporter('jshint', reporterFunction, reporterOptions));\n```\n\n##### Example usage\n\n```js\ngulp.task('lint', function() {\n    var gjslint = require('gulp-gjslint'),\n        stylish = require('jshint-stylish').reporter,\n        reporterOptions = {};\n\n    return gulp.src('./**/*.js')\n        .pipe(gjslint())\n        .pipe(gjslint.reporter('jshint', stylish, reporterOptions));\n});\n```\n\n## Known issues:\n\n* Poor handling for when `closure-linter-wrapper` blows up.\n* Limitation of `closure-linter-wrapper` where errors are not returned when a file fails\n  with a large number of errors. The task will still output the names of the failed file(s)\n  and the number of errors, but not the errors themselves.\n\n--------\n\n[![NPM](https://nodei.co/npm/gulp-gjslint.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/gulp-gjslint/)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://www.github.com/TomSeldon/gulp-gjslint.git"
  },
  "scripts": {
    "codeclimate": "codeclimate < coverage/lcov.info",
    "test": "gulp mocha && gulp lint"
  },
  "version": "0.1.5"
}
