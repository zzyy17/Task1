{
  "_args": [
    [
      {
        "raw": "gulp-git@https://nexus.hue.workslan/nexus/content/groups/hue-npm/gulp-git/-/gulp-git-0.5.6.tgz",
        "scope": null,
        "escapedName": "gulp-git",
        "name": "gulp-git",
        "rawSpec": "https://nexus.hue.workslan/nexus/content/groups/hue-npm/gulp-git/-/gulp-git-0.5.6.tgz",
        "spec": "https://nexus.hue.workslan/nexus/content/groups/hue-npm/gulp-git/-/gulp-git-0.5.6.tgz",
        "type": "remote"
      },
      "C:\\HUE\\closure-library-practice"
    ]
  ],
  "_from": "gulp-git@~0.5.6",
  "_id": "gulp-git@0.5.6",
  "_inCache": true,
  "_location": "/gulp-git",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gulp-git@https://nexus.hue.workslan/nexus/content/groups/hue-npm/gulp-git/-/gulp-git-0.5.6.tgz",
    "scope": null,
    "escapedName": "gulp-git",
    "name": "gulp-git",
    "rawSpec": "https://nexus.hue.workslan/nexus/content/groups/hue-npm/gulp-git/-/gulp-git-0.5.6.tgz",
    "spec": "https://nexus.hue.workslan/nexus/content/groups/hue-npm/gulp-git/-/gulp-git-0.5.6.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://nexus.hue.workslan/nexus/content/groups/hue-npm/gulp-git/-/gulp-git-0.5.6.tgz",
  "_shasum": "85c52c6ec27048dcc557e74ec96c8ff4b24297af",
  "_shrinkwrap": null,
  "_spec": "gulp-git@https://nexus.hue.workslan/nexus/content/groups/hue-npm/gulp-git/-/gulp-git-0.5.6.tgz",
  "_where": "C:\\HUE\\closure-library-practice",
  "author": {
    "name": "Steve Lacy me@slacy.me",
    "url": "slacy.me"
  },
  "bugs": {
    "url": "https://github.com/stevelacy/gulp-git/issues"
  },
  "dependencies": {
    "any-shell-escape": "^0.1.1",
    "gulp-util": "^3.0.1",
    "require-dir": "^0.1.0",
    "through2": "^0.6.3"
  },
  "description": "Git plugin for gulp (gulpjs.com)",
  "devDependencies": {
    "jshint": "^2.5.6",
    "mocha": "*",
    "rimraf": "*",
    "should": "*"
  },
  "engines": {
    "node": ">= 0.9.0"
  },
  "homepage": "http://github.com/stevelacy/gulp-git",
  "keywords": [
    "gulp",
    "git",
    "gulpgit",
    "gulpplugin",
    "gulp-plugin"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/stevelacy/gulp-git/raw/master/LICENSE"
    }
  ],
  "main": "./index.js",
  "name": "gulp-git",
  "optionalDependencies": {},
  "readme": "#gulp-git\n[![Build Status](https://travis-ci.org/stevelacy/gulp-git.png?branch=master)](https://travis-ci.org/stevelacy/gulp-git)\n[![NPM version](https://badge.fury.io/js/gulp-git.png)](http://badge.fury.io/js/gulp-git)\n\n<table>\n<tr>\n<td>Package</td><td>gulp-git</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>Git plugin for Gulp (gulpjs.com)</td>\n</tr>\n<tr>\n<td>Node Version</td>\n<td>>= 0.9</td>\n</tr>\n<tr>\n<td>Gulp Version</td>\n<td>3.x</td>\n</tr>\n</table>\n\n## Usage\n### Install\n    npm install gulp-git --save\n\n#### 0.4.0 introduced Breaking Changes!\nGit actions which did not require a [Vinyl](https://github.com/wearefractal/vinyl) file were refactored.\nPlease review the following docs for changes:\n##Example\n\n```javascript\nvar gulp = require('gulp');\nvar git = require('gulp-git');\n\n// Run git init\n// src is the root folder for git to initialize\ngulp.task('init', function(){\n  git.init(function (err) {\n    if (err) throw err;\n  });\n});\n\n// Run git init with options\ngulp.task('init', function(){\n  git.init({args: '--quiet --bare'}, function (err) {\n    if (err) throw err;\n  });\n});\n\n// Run git add\n// src is the file(s) to add (or ./*)\ngulp.task('add', function(){\n  return gulp.src('./git-test/*')\n    .pipe(git.add());\n});\n\n// Run git add with options\ngulp.task('add', function(){\n  return gulp.src('./git-test/*')\n    .pipe(git.add({args: '-f -i -p'}));\n});\n\n// Run git commit\n// src are the files to commit (or ./*)\ngulp.task('commit', function(){\n  return gulp.src('./git-test/*')\n    .pipe(git.commit('initial commit'));\n});\n\n// Run git commit with options\ngulp.task('commit', function(){\n  return gulp.src('./git-test/*')\n    .pipe(git.commit('initial commit', {args: '-A --amend -s'}));\n});\n\n// Run git remote add\n// remote is the remote repo\n// repo is the https url of the repo\ngulp.task('remote', function(){\n  git.addRemote('origin', 'https://github.com/stevelacy/git-test', function (err) {\n    if (err) throw err;\n  });\n});\n\n// Run git push\n// remote is the remote repo\n// branch is the remote branch to push to\ngulp.task('push', function(){\n  git.push('origin', 'master', function (err) {\n    if (err) throw err;\n  });\n});\n\n// Run git push with options\n// branch is the remote branch to push to\ngulp.task('push', function(){\n  git.push('origin', 'master', {args: \" -f\"}, function (err) {\n    if (err) throw err;\n  });\n});\n\n// Run git pull\n// remote is the remote repo\n// branch is the remote branch to pull from\ngulp.task('pull', function(){\n  git.pull('origin', 'master', {args: '--rebase'}, function (err) {\n    if (err) throw err;\n  });\n});\n\n\n// Clone a remote repo\ngulp.task('clone', function(){\n  git.clone('https://github.com/stevelacy/gulp-git', function (err) {\n    if (err) throw err;\n  });\n});\n\n\n// Tag the repo with a version\ngulp.task('tag', function(){\n  git.tag('v1.1.1', 'Version message', function (err) {\n    if (err) throw err;\n  });\n});\n\n// Tag the repo With signed key\ngulp.task('tagsec', function(){\n  git.tag('v1.1.1', 'Version message with signed key', {args: \"signed\"}, function (err) {\n    if (err) throw err;\n  });\n});\n\n// Create a git branch\ngulp.task('branch', function(){\n  git.branch('newBranch', function (err) {\n    if (err) throw err;\n  });\n});\n\n// Checkout a git branch\ngulp.task('checkout', function(){\n  git.checkout('branchName', function (err) {\n    if (err) throw err;\n  });\n});\n\n// Create and switch to a git branch\ngulp.task('checkout', function(){\n  git.checkout('branchName', {args:'-b'}, function (err) {\n    if (err) throw err;\n  });\n});\n\n// Merge branches to master\ngulp.task('merge', function(){\n  git.merge('branchName', function (err) {\n    if (err) throw err;\n  });\n});\n\n// Reset a commit\ngulp.task('reset', function(){\n  git.reset('SHA', function (err) {\n    if (err) throw err;\n  });\n});\n\n// Git rm a file or folder\ngulp.task('rm', function(){\n  return gulp.src('./gruntfile.js')\n    .pipe(git.rm());\n});\n\ngulp.task('addSubmodule', function(){\n  git.addSubmodule('https://github.com/stevelacy/git-test', 'git-test', { args: '-b master'});\n});\n\ngulp.task('updateSubmodules', function(){\n  git.updateSubmodule({ args: '--init' });\n});\n\n// Working tree status\ngulp.task('status', function(){\n  git.status({args: '--porcelain'}, function (err, stdout) {\n    if (err) throw err;\n  });\n});\n\n// Other actions that do not require a Vinyl\ngulp.task('log', function(){\n  git.exec({args : 'log --follow index.js'}, function (err, stdout) {\n    if (err) throw err;\n  });\n});\n\n// Run gulp's default task\ngulp.task('default',['add']);\n```\n\n##API\n\n### git.init(opt, cb)\n`git init`\n\nCreates an empty git repo\n\n`opt`: Object (optional) `{args: 'options', cwd: '/cwd/path', quiet: true}`\n\n`cb`: function, passed err if any\n\n```js\ngit.init({args:'options'}, function (err) {\n  //if (err) ...\n});\n```\n\n### git.clone(remote, opt, cb)\n`git clone <remote> <options>`\n\nClones a remote repo for the first time\n\n`remote`: String, remote url\n\n`opt`: Object (optional) `{args: 'options', cwd: '/cwd/path', quiet: true}`\n\n`cb`: function, passed err if any\n\n```js\ngit.clone('https://remote.git', function (err) {\n  //if (err) ...\n});\n```\n\n### git.add(opt)\n`git add <files>`\n\nAdds files to repo\n\n`opt`: Object (optional) `{args: 'options', quiet: true}`\n\n```js\ngulp.src('./*')\n  .pipe(git.add());\n});\n```\n\n### git.commit(message, opt)\n`git commit -m <message> <files>`\n\nCommits changes to repo\n\n`message`: String, commit message\n\n`opt`: Object (optional) `{args: 'options', cwd: '/cwd/path', quiet: true}`\n\n```js\ngulp.src('./*')\n  .pipe(git.commit('commit message'));\n});\n```\n\n### git.addRemote(remote, url, opt, cb)\n`git remote add <remote> <repo https url>`\n\nAdds remote repo url\n\n`remote`: String, name of remote, default: `origin`\n\n`url`: String, url of remote\n\n`opt`: Object (optional) `{args: 'options', cwd: '/cwd/path', quiet: true}`\n\n`cb`: function, passed err if any\n\n```js\ngit.addRemote('origin', 'git-repo-url', function (err) {\n  //if (err) ...\n});\n```\n\n### git.pull(remote, branch, opt, cb)\n`git pull <remote> <branch>`\n\nPulls changes from remote repo\n\n`remote`: String, name of remote, default: `origin`\n\n`branch`: String, branch, default: `master`\n\n`opt`: Object (optional) `{args: 'options', cwd: '/cwd/path', quiet: true}`\n\n`cb`: function, passed err if any\n\n```js\ngit.pull('origin', 'master', function (err) {\n  //if (err) ...\n});\n```\n\n### git.push(remote, branch, opt, cb)\n`git push <remote> <branch>`\n\nPushes changes to remote repo\n\n`remote`: String, name of remote, default: `origin`\n\n`branch`: String, branch, default: `master`\n\n`opt`: Object (optional) `{args: 'options', cwd: '/cwd/path', quiet: true}`\n\n`cb`: function, passed err if any\n\n```js\ngit.push('origin', 'master', function (err) {\n  //if (err) ...\n});\n```\n\n### git.tag(version, message, opt, cb)\n`git tag -a/s <version> -m <message>`\n\nTags repo with release version\n\n`version`: String, tag name\n\n`message`: String, tag message\n\n`opt`: Object (optional) `{args: 'options', cwd: '/cwd/path', quiet: true}`\n\n`cb`: function, passed err if any\n\n```js\ngit.tag('v1.1.1', 'Version message', function (err) {\n  //if (err) ...\n});\n```\n\nif options.signed is set to true, the tag will use the git secure key:\n`git.tag('v1.1.1', 'Version message with signed key', {signed: true});`\n\n### git.branch(branch, opt, cb)\n`git branch <new branch name>`\n\nCreates a new branch but doesn't switch to it\n\n(Want to switch as you create? Use `git.checkout({args:'-b'})`.)\n\n`branch`: String, branch\n\n`opt`: Object (optional) `{args: 'options', cwd: '/cwd/path', quiet: true}`\n\n`cb`: function, passed err if any\n\n```js\ngit.branch('development', function (err) {\n  //if (err) ...\n});\n```\n\n### git.checkout(branch, opt, cb)\n`git checkout <new branch name>`\n\nCheckout a new branch with files\n\n`branch`: String, branch\n\n`opt`: Object (optional) `{args: 'options', cwd: '/cwd/path', quiet: true}`\n\n`cb`: function, passed err if any\n\n```js\ngit.checkout('development', function (err) {\n  //if (err) ...\n});\n```\n\nIf you want to create a branch and switch to it:\n\n```js\ngit.checkout('development', {args:'-b'}, function (err) {\n  //if (err) ...\n});\n```\n\nIf you want to checkout files (e.g. revert them) use git.checkoutFiles:\n\n```js\ngulp.src('./*')\n  .pipe(git.checkoutFiles());\n```\n\n### git.checkoutFiles(opt)\n`git checkout <list of files>`\n\nCheckout (e.g. reset) files\n\n`opt`: Object (optional) `{args: 'options', quiet: true}`\n\n```js\ngulp.src('./*')\n  .pipe(git.checkoutFiles());\n```\n\n### git.merge(branch, opt, cb)\n`git merge <branch name> <options>`\n\nMerges a branch into the current branch\n\n`branch`: String, source branch\n\n`opt`: Object (optional) `{args: 'options', cwd: '/cwd/path', quiet: true}`\n\n`cb`: function, passed err if any\n\n```js\ngit.merge('development', function (err) {\n  //if (err) ...\n});\n```\n\n### git.rm()\n`git rm <file> <options>`\n\nRemoves a file from git and deletes it\n\n`opt`: Object (optional) `{args: 'options', quiet: true}`\n\n```js\ngulp.src('./*')\n  .pipe(git.commit('commit message'));\n});\n```\n\n### git.reset(commit, opt, cb)\n`git reset <SHA> <options>`\n\nResets working directory to specified commit hash\n\n`commit`: String, commit hash or reference\n\n`opt`: Object (optional) `{args: 'options', cwd: '/cwd/path', quiet: true}`\n\n`cb`: function, passed err if any\n\n```js\ngit.reset('HEAD' {args:'--hard'}, function (err) {\n  //if (err) ...\n});\n```\n\n### git.revParse(opt, cb)\n`git rev-parse <options>`\n\nGet details about the repository\n\n`opt`: Object (optional) `{args: 'options', cwd: '/cwd/path', quiet: true}`\n\n`cb`: function, passed err if any and command stdout\n\n\n```js\ngit.revParse({args:'--short HEAD'}, function (err, hash) {\n  //if (err) ...\n  console.log('current git hash: '+hash);\n});\n```\n\n### git.addSubmodule()\n`git submodule add <options> <repository> <path>`\n\nOptions: Object\n\n`.addSubmodule('https://repository.git', 'path', {args: \"options\", quiet: true})`\n\n### git.updateSubmodule()\n`git submodule update <options>`\n\nOptions: Object\n\n`.updateSubmodule({args: \"options\", quiet: true})`\n\n\n### git.status(opt, cb)\n`git status <options>`\n\nShow the working tree status\n\n`opt`: Object (optional) `{args: 'options', cwd: '/cwd/path', quiet: true}`\n\n`cb`: function (optional), passed err and command stdout\n\n```js\ngit.status({args : '--porcelain'}, function (err, stdout) {\n  // if (err) ...\n});\n```\n\n### git.exec(opt, cb)\n`git <options>`\n\nRun other git actions that do not require a Vinyl.\n\n`opt`: Object (optional) `{args: 'options', cwd: '/cwd/path', quiet: true}`\n\n`cb`: function (optional), passed err and command stdout\n\n```js\ngit.exec({args : 'log --follow index.js'}, function (err, stdout) {\n  //if (err) ...\n});\n```\n\n***\n\n\n\n\n####You can view more examples in the [example folder.](https://github.com/stevelacy/gulp-git/tree/master/examples)\n\n\n\n## LICENSE\n\n(MIT License)\n\nCopyright (c) 2015 Steve Lacy <me@slacy.me> slacy.me - Fractal <contact@wearefractal.com> wearefractal.com\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/stevelacy/gulp-git.git"
  },
  "scripts": {
    "test": "mocha --reporter spec --timeout 6000 test/main.js && jshint ./index.js ./examples/. ./lib/. ./test/."
  },
  "version": "0.5.6"
}
